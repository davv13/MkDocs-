{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Our Customer Churn Prediction project stands at the intersection of advanced analytics and customer experience. In a competitive subscription-based market landscape, our initiative is not just about predicting churn but also about crafting impactful customer retention strategies.</p>"},{"location":"#our-mission","title":"Our Mission","text":"<p>We strive to empower businesses with actionable insights, transforming raw data into a strategic asset. By leveraging machine learning and data analytics, we aim to predict customer behaviors and develop interventions that not only mitigate churn but also forge stronger customer relationships.</p>"},{"location":"#collaboration-and-implementation","title":"Collaboration and Implementation","text":"<p>This documentation unfolds the collaborative journey of our diverse team, from DB Developers to Data Scientists, as we share our approach, methodology, and insights gained from the data. Together, we implement a predictive system integrated seamlessly into business processes for real-time actionability.</p>"},{"location":"#invitation-to-explore","title":"Invitation to Explore","text":"<p>We invite you to explore our documentation to understand the depth and breadth of our project. Each section, from the project overview to the conclusion, is crafted to provide a comprehensive view of our endeavors and achievements.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The <code>api.py</code> module contains the FastAPI application that serves as an interface to interact with the Customer Retention Toolkit. This document outlines the available API endpoints and their usage.</p>"},{"location":"api/#setup","title":"Setup","text":"<p>Ensure FastAPI and required packages are installed:</p> <pre><code>pip install fastapi[all] pandas pydantic\n</code></pre> <p>Run the FastAPI server:</p> <pre><code>uvicorn api:app --reload\n</code></pre>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#root-endpoint-get","title":"Root Endpoint (<code>GET /</code>)","text":"<p>Returns a welcome message.</p> <p>Response:</p> <pre><code>{\n  \"message\": \"Initializing\"\n}\n</code></pre>"},{"location":"api/#fetch-record-get-get_datacustomerid","title":"Fetch Record (<code>GET /get_data/{CustomerID}</code>)","text":"<p>Fetches a record from the CustomerMetrics table by CustomerID.</p> <p>Parameters:</p> <ul> <li><code>CustomerID</code> (int): The ID of the customer to fetch.</li> </ul> <p>Response:</p> <p>A dictionary with the customer's data or an error message if not found.</p>"},{"location":"api/#create-record-post-create_data","title":"Create Record (<code>POST /create_data</code>)","text":"<p>Creates a new record in the CustomerMetrics table.</p> <p>Request Body:</p> <ul> <li><code>UserRequest</code> model: Contains customer data to be inserted.</li> </ul> <p>Response:</p> <p>A message indicating the success of the operation.</p>"},{"location":"api/#update-record-put-update_data","title":"Update Record (<code>PUT /update_data</code>)","text":"<p>Updates a record in the CustomerMetrics table.</p> <p>Request Body:</p> <ul> <li><code>UpdateRecordRequest</code> model: Contains the column to be updated, the new value, and the CustomerID of the record to update.</li> </ul> <p>Response:</p> <p>A message indicating the success of the operation.</p>"},{"location":"api/#predict-churn-get-predict_churncustomerid","title":"Predict Churn (<code>GET /predict_churn/{CustomerID}</code>)","text":"<p>Predicts churn status for a given CustomerID using the machine learning workflow.</p> <p>Parameters:</p> <ul> <li><code>CustomerID</code> (int): The ID of the customer for churn prediction.</li> </ul> <p>Response:</p> <p>A dictionary containing the CustomerID and the churn prediction.</p>"},{"location":"api/#models","title":"Models","text":""},{"location":"api/#userrequest","title":"<code>UserRequest</code>","text":"<p>Pydantic model representing a user request for creating a record.</p> <p>Attributes:</p> <ul> <li><code>CustomerID</code> (int): The customer's ID.</li> <li>... (other attributes) ...</li> <li><code>CustomerServiceCalls</code> (int): The number of customer service calls made.</li> </ul>"},{"location":"api/#updaterecordrequest","title":"<code>UpdateRecordRequest</code>","text":"<p>Pydantic model representing a request to update a record.</p> <p>Attributes:</p> <ul> <li><code>column_name</code> (str): The name of the column to update.</li> <li><code>new_value</code> (Any): The new value for the column.</li> <li><code>CustomerID</code> (int): The ID of the customer whose record is to update.</li> </ul>"},{"location":"api/#examples","title":"Examples","text":"<p>Here are the examples extracted from the Jupyter notebook that demonstrate how to use the API with the <code>requests</code> library in Python:</p>"},{"location":"api/#example-1-root-endpoint","title":"Example 1: Root Endpoint","text":"<pre><code>import requests\n\n# The base URL for your API\nbase_url = \"http://127.0.0.1:5000\"\n\n# GET request to the root endpoint\nresponse = requests.get(f\"{base_url}/\")\nprint(response.json())\n</code></pre>"},{"location":"api/#example-2-get-customer-data","title":"Example 2: Get Customer Data","text":"<pre><code># Replace with a valid customer ID\ncustomer_id = 1\nresponse = requests.get(f\"{base_url}/get_data/{customer_id}\")\nprint(response.json())\n</code></pre>"},{"location":"api/#example-3-create-new-customer-data","title":"Example 3: Create New Customer Data","text":"<pre><code>new_customer_data = {\n    \"CustomerID\": 2749,\n    \"ChurnStatus\": 1,\n    \"StateID\": 1,  # Assuming '1' is a valid StateID in your database\n    \"PlanID\": 1,  # Assuming '1' is a valid PlanID in your database\n    \"DayUsageID\": 1,  # Assuming '1' is a valid DayUsageID in your database\n    \"EveUsageID\": 1,  # Assuming '1' is a valid EveUsageID in your database\n    \"NightUsageID\": 1,  # Assuming '1' is a valid NightUsageID in your database\n    \"IntlUsageID\": 1,  # Assuming '1' is a valid IntlUsageID in your database\n    \"CustomerServiceCalls\": 1  # Number of customer service calls\n}\n\nresponse = requests.post(f\"{base_url}/create_data\", json=new_customer_data)\nprint(response.json())\n</code></pre>"},{"location":"api/#example-4-update-customer-data","title":"Example 4: Update Customer Data","text":"<pre><code>update_data = {\n    \"column_name\": \"ChurnStatus\",\n    \"new_value\": 1,\n    \"CustomerID\": 2749  # Make sure this ID exists in your database\n}\nresponse = requests.put(f\"{base_url}/update_data\", json=update_data)\nprint(response.json())\n</code></pre>"},{"location":"api/#example-5-predict-customer-churn","title":"Example 5: Predict Customer Churn","text":"<pre><code>customer_id = 555\nresponse = requests.get(f\"{base_url}/predict_churn/{customer_id}\")\nprint('Status Code:', response.status_code)\n\nif response.status_code == 200:\n    try:\n        data = response.json()\n        print(data)\n    except JSONDecodeError:\n        print('Response could not be decoded as JSON:', response.text)\nelse:\n    print('Failed to fetch data:', response.text)\n</code></pre>"},{"location":"logger/","title":"Custom Logger Documentation","text":""},{"location":"logger/#overview","title":"Overview","text":"<p>The <code>CustomFormatter</code> class in the <code>logger</code> module provides a way to format logging messages with color coding and custom formatting for better readability during development and debugging. This formatter extends the functionality of Python's built-in <code>logging</code> module.</p>"},{"location":"logger/#installation","title":"Installation","text":"<p>This module is part of the <code>customer_retention_toolkit</code> package and does not require separate installation.</p>"},{"location":"logger/#class-customformatter","title":"Class <code>CustomFormatter</code>","text":""},{"location":"logger/#description","title":"Description","text":"<p><code>CustomFormatter</code> is a custom logging formatter class that provides colored and informative logging output. It is designed to enhance the visibility of different logging levels.</p>"},{"location":"logger/#usage","title":"Usage","text":"<p>Here is an example of how to use the <code>CustomFormatter</code>:</p> <pre><code>import logging\nfrom logger import CustomFormatter\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nch.setFormatter(CustomFormatter())\nlogger.addHandler(ch)\n\nlogger.debug(\"This is a debug message.\")\nlogger.info(\"This is an informational message.\")\nlogger.warning(\"This is a warning message.\")\nlogger.error(\"This is an error message.\")\nlogger.critical(\"This is a critical message.\")\n</code></pre>"},{"location":"logger/#log-format","title":"Log Format","text":"<p>The format for log messages is:</p> <pre><code>%(asctime)s - %(name)s - %(funcName)s - %(levelname)s - (%(message)s) - line: %(lineno)d\n</code></pre>"},{"location":"logger/#log-levels-and-colors","title":"Log Levels and Colors","text":"<p>The <code>CustomFormatter</code> class defines the following log level and color mappings:</p> <ul> <li>DEBUG: Grey</li> <li>INFO: Violet</li> <li>WARNING: Yellow</li> <li>ERROR: Red</li> <li>CRITICAL: Bold Red</li> </ul>"},{"location":"logger/#method-format","title":"Method <code>format</code>","text":""},{"location":"logger/#description_1","title":"Description","text":"<p>Customizes the format of the log records.</p>"},{"location":"logger/#parameters","title":"Parameters","text":"<ul> <li><code>record</code>: The log record that needs to be formatted.</li> </ul>"},{"location":"logger/#returns","title":"Returns","text":"<p>The method returns a formatted string with the specified color for the log level.</p>"},{"location":"logger/#integration-example","title":"Integration Example","text":"<p>To integrate the <code>CustomFormatter</code> into your main application, you can set it up in the entry-point script. For example, in your <code>main.py</code>:</p> <pre><code>import logging\nfrom logger import CustomFormatter\n\n# Set up logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nhandler = logging.StreamHandler()\nhandler.setFormatter(CustomFormatter())\nlogger.addHandler(handler)\n</code></pre> <p>Now all logging messages from <code>logger</code> will be formatted with colors corresponding to their severity levels.</p>"},{"location":"mlworkflo/","title":"MLWorkflow Documentation","text":""},{"location":"mlworkflo/#overview","title":"Overview","text":"<p>The <code>MLWorkflow</code> class is designed for managing the machine learning workflow, including data loading, preprocessing, model training, evaluation, and prediction. This class simplifies the process of applying machine learning models to datasets.</p>"},{"location":"mlworkflo/#installation","title":"Installation","text":"<p>Before using <code>MLWorkflow</code>, ensure you have the following packages installed: - pandas - numpy - sklearn - sqlite3</p> <p>These can be installed via pip:</p> <pre><code>pip install pandas numpy scikit-learn sqlite3\n</code></pre>"},{"location":"mlworkflo/#class-attributes","title":"Class Attributes","text":"<ul> <li><code>dbname</code> (str): Database name to connect to for data loading.</li> <li><code>model</code> (RandomForestClassifier): The machine learning model to be used.</li> <li><code>trained_columns</code> (list): List of columns used for training the model.</li> </ul>"},{"location":"mlworkflo/#methods","title":"Methods","text":"<ul> <li><code>__init__(self, dbname: str)</code> Initializes the MLWorkflow class with a database name and model.</li> </ul>"},{"location":"mlworkflo/#arguments","title":"Arguments","text":"<ul> <li> <p><code>dbname</code> (str): The name of the database to connect to.</p> </li> <li> <p><code>load_data_from_db(self, table_names: list) -&gt; pd.DataFrame</code> : Loads data from a SQLite database from the given table names.</p> </li> <li> <p><code>table_names</code> (list): A list of table names to load data from.</p> </li> </ul>"},{"location":"mlworkflo/#returns","title":"Returns","text":"<ul> <li><code>DataFrame</code>: A pandas DataFrame containing the concatenated data from the tables.</li> </ul>"},{"location":"mlworkflo/#preprocess-data","title":"Preprocess Data","text":"<ul> <li><code>preprocess_data(self, df_comb: pd.DataFrame, target: str = 'ChurnStatus') -&gt; pd.DataFrame</code></li> </ul> <p>Preprocesses the data by removing specified columns and one-hot encoding categorical variables.</p>"},{"location":"mlworkflo/#arguments_1","title":"Arguments","text":"<ul> <li><code>df_comb</code> (DataFrame): The DataFrame to preprocess.</li> <li><code>target</code> (str, optional): The target variable to exclude from preprocessing. Defaults to 'ChurnStatus'.</li> </ul>"},{"location":"mlworkflo/#returns_1","title":"Returns","text":"<ul> <li><code>DataFrame</code>: The preprocessed DataFrame.</li> </ul>"},{"location":"mlworkflo/#additional-methods","title":"Additional Methods","text":"<ul> <li><code>split_data</code></li> <li><code>train_model</code></li> <li><code>evaluate_model</code></li> <li><code>predict</code></li> <li><code>run_workflow</code></li> <li><code>save_predictions_to_db</code></li> <li><code>predict_for_customer</code></li> </ul> <p>Each of these methods can be documented in a similar format, detailing their purpose, arguments, and return values.</p>"},{"location":"mlworkflo/#usage-example","title":"Usage Example","text":"<p>Here is a basic example of how to use the <code>MLWorkflow</code> class:</p> <pre><code>from your_package_name import MLWorkflow\n\n# Initialize the MLWorkflow\nworkflow = MLWorkflow(dbname=\"your_database_name\")\n\n# Load and preprocess data\ndata = workflow.load_data_from_db([\"table1\", \"table2\"])\npreprocessed_data = workflow.preprocess_data(data)\n\n# Split, train, and evaluate the model\nX_train, X_test, y_train, y_test = workflow.split_data(preprocessed_data)\nworkflow.train_model(X_train, y_train)\nmetrics = workflow.evaluate_model(X_test, y_test)\n\nprint(metrics)\n</code></pre>"},{"location":"package_structure/","title":"Package Structure","text":""},{"location":"package_structure/#package-structure-overview","title":"Package Structure Overview","text":"<ul> <li>api: Contains the interface for interacting with the predictive model.</li> <li>db: Database scripts, including the schema and SQL interactions.</li> <li>docs: Documentation files, such as the Entity Relationship Diagram (ERD), usage instructions, roadmap, and use cases.</li> <li>logger: Logging functionality to keep track of operations and errors.</li> <li>models: The machine learning models and related workflows.</li> </ul>"},{"location":"package_structure/#setup-and-configuration","title":"Setup and Configuration","text":"<p>Steps to run the code:</p> <p>Create new env. </p> <pre><code>python -m venv venv\n</code></pre> <p>Install the requirements.txt in the env by running the following code.</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Run the cells in <code>example.ipynb</code></p> <p>When you reach the <code>API</code> part, start the api by running the following code:</p> <pre><code>python run.py\n</code></pre> <p>The following steps are for web usage of API:</p> <p><code>http://127.0.0.1:5000</code> add <code>http://127.0.0.1:5000/docs</code> press enter.</p> <p>Press on the <code>get_info</code>, then press on <code>try it out</code> and on the <code>ID</code> write any id from 1 to 3 and press <code>execute</code>.</p> <p>You will find the result in <code>Response</code> body. </p>"},{"location":"schema/","title":"Database Schema Documentation","text":""},{"location":"schema/#overview","title":"Overview","text":"<p>The <code>schema.py</code> module outlines the database schema for the Customer Retention Toolkit. It utilizes SQLAlchemy ORM for defining tables and relationships. This document provides details about each table and its fields, along with information on how to generate the database schema.</p>"},{"location":"schema/#setup","title":"Setup","text":"<p>To use this module, ensure SQLAlchemy is installed:</p> <pre><code>pip install sqlalchemy\n</code></pre>"},{"location":"schema/#tables","title":"Tables","text":""},{"location":"schema/#customermetrics","title":"<code>CustomerMetrics</code>","text":"<ul> <li>Description: Holds customer churn metrics.</li> <li>Fields:</li> <li><code>CustomerID</code> (Integer): Primary key. Unique identifier for a customer.</li> <li><code>StateID</code> (Integer): Foreign key to the <code>State</code> table. Represents the state ID associated with the customer.</li> <li>... (additional fields) ...</li> <li><code>ChurnStatus</code> (Integer): The churn status of the customer.</li> </ul>"},{"location":"schema/#state","title":"<code>State</code>","text":"<ul> <li>Description: Represents the State table in the database.</li> <li>Fields:</li> <li><code>StateID</code> (Integer): Primary key. Unique identifier for a state.</li> <li><code>StateName</code> (String): The name of the state.</li> </ul> <p>... (repeat for each class/table) ...</p>"},{"location":"schema/#relationships","title":"Relationships","text":"<ul> <li>The <code>CustomerMetrics</code> table has foreign keys linking to the <code>State</code>, <code>PlanDetails</code>, <code>DayUsage</code>, <code>EveUsage</code>, <code>NightUsage</code>, and <code>IntlUsage</code> tables.</li> <li>Each relationship is represented by a <code>ForeignKey</code> constraint in the SQLAlchemy model.</li> </ul>"},{"location":"schema/#functions","title":"Functions","text":""},{"location":"schema/#create_database","title":"<code>create_database</code>","text":"<p>Description: Initializes the database by creating all tables based on the defined schema if they do not exist.</p> <p>Usage:</p> <pre><code>from db.schema import create_database\n\n# Create the database and all tables\ncreate_database()\n</code></pre>"},{"location":"schema/#logging","title":"Logging","text":"<p>Logging is set up to capture and format output from database operations. The custom formatter from <code>logger</code> sub-package is used for colored and formatted output.</p> <p>Example Log Output:</p> <pre><code>2023-03-15 10:00:00 - schema.py - create_database - INFO - (Database tables created) - line: 150\n</code></pre>"},{"location":"schema/#integration-example","title":"Integration Example","text":"<p>To integrate the database schema into your main application, you can call the <code>create_database</code> function at the application's entry point after configuring the logging and database engine.</p> <pre><code>from db.schema import create_database\n\n# Set up logging here (omitted for brevity)\n\n# Initialize the database\ncreate_database()\n</code></pre>"},{"location":"sql_interactions/","title":"SQL Interactions Documentation","text":""},{"location":"sql_interactions/#overview","title":"Overview","text":"<p>The <code>SqlHandler</code> class in the <code>sql_interactions.py</code> module provides a convenient interface for interacting with a SQLite database. It enables executing SQL commands, handling data, and managing database tables.</p>"},{"location":"sql_interactions/#setup","title":"Setup","text":"<p>To use the <code>SqlHandler</code>, ensure that <code>sqlite3</code>, <code>pandas</code>, and <code>numpy</code> are installed:</p> <pre><code>pip install pandas numpy\n</code></pre>"},{"location":"sql_interactions/#class-sqlhandler","title":"Class <code>SqlHandler</code>","text":""},{"location":"sql_interactions/#description","title":"Description","text":"<p><code>SqlHandler</code> manages the connection to a SQLite database and provides methods to interact with a specified table.</p>"},{"location":"sql_interactions/#initialization","title":"Initialization","text":"<pre><code>from db.sql_interactions import SqlHandler\n\nsql_handler = SqlHandler(dbname=\"your_database_name\", table_name=\"your_table_name\")\n</code></pre>"},{"location":"sql_interactions/#methods","title":"Methods","text":""},{"location":"sql_interactions/#close_cnxn","title":"<code>close_cnxn</code>","text":"<p>Closes the database connection and commits any pending transactions.</p>"},{"location":"sql_interactions/#get_table_columns","title":"<code>get_table_columns</code>","text":"<p>Returns the column names of the specified table.</p>"},{"location":"sql_interactions/#truncate_table","title":"<code>truncate_table</code>","text":"<p>Deletes all data from the specified table without removing the table structure.</p>"},{"location":"sql_interactions/#drop_table","title":"<code>drop_table</code>","text":"<p>Deletes the specified table from the database.</p>"},{"location":"sql_interactions/#insert_many","title":"<code>insert_many</code>","text":"<p>Inserts multiple records into the specified table from a pandas DataFrame.</p>"},{"location":"sql_interactions/#from_sql_to_pandas","title":"<code>from_sql_to_pandas</code>","text":"<p>Fetches data from the specified table and returns a pandas DataFrame.</p>"},{"location":"sql_interactions/#update_table","title":"<code>update_table</code>","text":"<p>Updates records in the specified table based on a condition.</p>"},{"location":"sql_interactions/#examples","title":"Examples","text":""},{"location":"sql_interactions/#truncating-a-table","title":"Truncating a Table","text":"<pre><code>sql_handler.truncate_table()\n</code></pre>"},{"location":"sql_interactions/#dropping-a-table","title":"Dropping a Table","text":"<pre><code>sql_handler.drop_table()\n</code></pre>"},{"location":"sql_interactions/#inserting-data","title":"Inserting Data","text":"<pre><code>import pandas as pd\n\n# Assuming df is your DataFrame containing the data to insert\nsql_handler.insert_many(df)\n</code></pre>"},{"location":"sql_interactions/#fetching-data","title":"Fetching Data","text":"<pre><code>df = sql_handler.from_sql_to_pandas(chunksize=1000, order_by=\"column_name\")\n</code></pre>"},{"location":"sql_interactions/#updating-data","title":"Updating Data","text":"<pre><code>condition = \"column_name = value\"\nupdate_values = {\"column_to_update\": \"new_value\"}\nsql_handler.update_table(condition, update_values)\n</code></pre>"},{"location":"sql_interactions/#logging","title":"Logging","text":"<p>The <code>SqlHandler</code> uses a custom logging formatter for informative output during database operations.</p> <p>Example Log Output:</p> <pre><code>2023-03-15 10:00:00 - sql_interactions.py - get_table_columns - INFO - (The list of columns: ['id', 'name', 'value']) - line: 42\n</code></pre>"}]}